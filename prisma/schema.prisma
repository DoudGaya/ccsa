generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model eventBooking {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  phone             String
  organization      String
  event             String
  gender            Gender 
  age               Int
  role              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TrainingApplication {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  phone             String
  organization      String
  gender            Gender
  age               Int
  role              String
  training          String
  status            ApplicationStatus @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@map("rsvp")
}

model CustomCourse {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  phone             String
  organization      String
  course            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Contact {
  id                Int      @id @default(autoincrement())
  name              String?
  email             String?
  subject           String?
  message           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Volunteers {
  id                        Int      @id @default(autoincrement())
  name                      String
  email                     String
  phone                     String?
  state                     String?
  gender                    Gender?
  localGovernment           String?
  organization              String?
  statementOfInterest       String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  yearsOfFarmingExperience  Int?
}

model ProgramApplication {
  id                    Int      @id @default(autoincrement())
  firstName               String
  middleName              String?
  surname                 String
  dateOfBirth             DateTime
  email                   String
  phoneNumber             String
  address                 String
  passportNumber          String
  duration                String
  passportDateOfIssue     DateTime
  passportExpiryDate      DateTime
  passportCountryOfIssue  String
  highestQualification    String
  isCosmopolitanStudent   Boolean  @default(false)
  course                  String?
  program                 String
  status                  ApplicationStatus @default(PENDING)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  articleSlug String
  name      String
  email     String
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  Male
  Female
}

enum UserRole {
  ADMIN
  USER
}
